# xss.py
import requests
from bs4 import BeautifulSoup
import logging
import json

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def send_request(url, method, data, headers):
    try:
        response = requests.request(method, url, data=data, headers=headers)
        return response
    except requests.RequestException as e:
        logger.error(f"Request error: {e}")
        return None

def test_xss_injection(url, data, payload):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    response = send_request(url, 'POST', data, headers)
    if response:
        return payload in response.text
    return False

def analyze_xss(scraped_data):
    vulnerabilities = []
    logger.info(f"Analyzing XSS vulnerabilities for scraped data: {scraped_data}")
    xss_payloads = ["<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>"]

    for page in scraped_data:
        url = page['URL']
        forms = page.get('Forms', [])
        for form in forms:
            action = form['action'] if form['action'] else url
            method = form['method']
            inputs = form['inputs']
            for input_field in inputs:
                name = input_field['name']
                if not name:
                    continue

                for payload in xss_payloads:
                    data = {name: payload}
                    try:
                        is_vulnerable = test_xss_injection(action, data, payload)
                        vulnerabilities.append({
                            'url': url,
                            'parameter': name,
                            'is_vulnerable': is_vulnerable,
                            'payload': payload,
                            'type': 'XSS'
                        })
                    except Exception as e:
                        logger.error(f"Unexpected error: {e}")

    logger.info(f"XSS vulnerabilities found: {vulnerabilities}")
    return vulnerabilities

def load_scraped_data(file_path):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)
        logger.info(f"Scraped data loaded from {file_path}")
        return data
    except Exception as e:
        logger.error(f"Error loading scraped data from {file_path}: {e}")
        return []

if __name__ == '__main__':
    scraped_data = load_scraped_data('scraped_data.json')
    vulnerabilities = analyze_xss(scraped_data)
    with open('xss_vulnerabilities.json', 'w') as f:
        json.dump(vulnerabilities, f, indent=4)
