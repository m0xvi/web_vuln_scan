import html
from datetime import datetime
import aiohttp
import telebot
import multiprocessing
import asyncio
import logging
import time
import json
from scraper import spider
from sql import analyze_vulnerabilities as analyze_sql_vulnerabilities, load_scraped_data
from xss import analyze_xss
from csrf import analyze_csrf
from lfi import analyze_lfi
from rfi import analyze_rfi
from idor import analyze_idor
from requests.exceptions import ConnectionError, ReadTimeout
from tenacity import retry, stop_after_attempt, wait_fixed
from aiohttp import ClientSession, FormData
from urllib.parse import urlparse
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '6979756435:AAG1dpmdnqwkBs6yXb1DJ9jpWhsCc8a16t0'
bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_markup.add('–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–æ–º–æ—â—å', '–û –±–æ—Ç–µ')

# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
scan_menu_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
scan_menu_markup.add('SQL Injection', 'XSS', 'CSRF', 'LFI', 'RFI', 'IDOR')
scan_menu_markup.add('–ù–∞–∑–∞–¥')

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
cancel_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
cancel_markup.add('–û—Ç–º–µ–Ω–∞')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
vulnerabilities = []
results = []
current_scan = None
pending_url = None


def escape_html(text):
    return html.escape(text)


def format_results(vulnerabilities):
    formatted_results = []
    for vulnerability in vulnerabilities:
        if vulnerability.get('is_vulnerable'):
            result_parts = []

            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            result_parts.append(
                f"<b>üìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b> <code>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</code>")
            result_parts.append(f"<b>üìÑ URL:</b> <code>{escape_html(vulnerability['url'])}</code>")
            result_parts.append(f"<b>‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç—å:</b> {'<b>–î–∞</b>' if vulnerability['is_vulnerable'] else '–ù–µ—Ç'}")
            result_parts.append(
                f"<b>‚ò†Ô∏è –¢–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏:</b> <code>{escape_html(vulnerability.get('type', 'Unknown'))}</code>")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            if 'parameter' in vulnerability:
                result_parts.append(f"<b>üìå –ü–∞—Ä–∞–º–µ—Ç—Ä:</b> <code>{escape_html(vulnerability['parameter'])}</code>")
            if 'payload' in vulnerability:
                result_parts.append(f"<b>‚öôÔ∏è Payload:</b> <code>{escape_html(vulnerability['payload'])}</code>")
            if 'response_time' in vulnerability:
                result_parts.append(
                    f"<b>‚è≥ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</b> <code>{escape_html(vulnerability['response_time'])}</code>")
            if 'form_action' in vulnerability:
                result_parts.append(f"<b>üîó Action —Ñ–æ—Ä–º—ã:</b> <code>{escape_html(vulnerability['form_action'])}</code>")
            if 'form_method' in vulnerability:
                result_parts.append(f"<b>üìù –ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º—ã:</b> <code>{escape_html(vulnerability['form_method'])}</code>")
            if 'form_fields' in vulnerability:
                result_parts.append(
                    f"<b>üîç –ü–æ–ª—è —Ñ–æ—Ä–º—ã:</b> <code>{escape_html(', '.join(vulnerability['form_fields']))}</code>")

            result_parts.append(f"<b>üîç –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {escape_html(vulnerability.get('risk_level', 'üîµ –ù–µ—Ç'))}")
            result_parts.append(
                f"<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:</b> {escape_html(vulnerability.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'))}")

            formatted_result = '\n'.join(result_parts)
            formatted_results.append(formatted_result)

    logger.info(f"Total formatted results: {len(formatted_results)}")
    return formatted_results


def create_results_keyboard(page, total_pages):
    markup = InlineKeyboardMarkup(row_width=3)
    buttons = []
    if page > 1:
        buttons.append(
            InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=json.dumps({"method": "pagination", "page": page - 1})))
    buttons.append(InlineKeyboardButton(text=f'{page}/{total_pages}', callback_data='noop'))
    if page < total_pages:
        buttons.append(InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è',
                                            callback_data=json.dumps({"method": "pagination", "page": page + 1})))
    markup.row(*buttons)
    markup.add(
        InlineKeyboardButton(text='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data=json.dumps({"method": "recommend", "page": page})),
        InlineKeyboardButton(text='–û—Ç—á–µ—Ç', callback_data='{"method": "report"}'),
        InlineKeyboardButton(text='–ü–æ–º–æ—â—å', callback_data='{"method": "help"}')
    )
    return markup


def send_results_page(chat_id, page, message_id=None):
    logger.info(f"send_results_page called with page: {page}")
    load_results_from_file()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    logger.info(f"Current results: {results}")
    if not results:
        logger.error("No results to display.")
        bot.send_message(chat_id, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    total_pages = len(results)
    logger.info(f"Total pages: {total_pages}, Current results: {results}")
    if page < 1 or page > total_pages:
        logger.error(f"Requested page {page} is out of range, total results: {total_pages}")
        return
    results_message = results[page - 1]  # –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
    markup = create_results_keyboard(page, total_pages)
    logger.info(f"Results message for page {page}: {results_message}")
    if message_id:
        bot.edit_message_text(results_message, chat_id, message_id, reply_markup=markup, parse_mode='HTML')
    else:
        bot.send_message(chat_id, results_message, reply_markup=markup, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        logger.info(f"callback_query called with data: {call.data}")
        req = json.loads(call.data)
        if req['method'] == 'pagination':
            page = req['page']
            logger.info(f"Handling pagination to page: {page}")
            send_results_page(call.message.chat.id, page, call.message.message_id)
        elif req['method'] == 'noop':
            pass  # No operation, just a placeholder
        elif req['method'] == 'recommend':
            page = req['page']
            logger.info(f"Handling recommendations for page: {page}")
            recommendation = vulnerabilities[page - 1].get('recommendation', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            bot.send_message(call.message.chat.id, recommendation)
        elif req['method'] == 'report':
            send_report(call)
        elif req['method'] == 'help':
            send_help(call.message)  # –ü–µ—Ä–µ–¥–∞–µ–º call.message, –∞ –Ω–µ —Å–∞–º call
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error in callback_query: {e}")
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
    except Exception as e:
        logger.error(f"Error in callback_query: {e}")
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, """
    üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.

    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

    /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

    üíâ /scan_sql <URL> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
    ‚úÇÔ∏è /scan_xss <URL> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ú–µ–∂—Å–∞–π—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∏–Ω–≥–∞ (XSS)
    üç™ /scan_csrf <URL> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ú–µ–∂—Å–∞–π—Ç–æ–≤–æ–π –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (CSRF)
    üì• /scan_lfi <URL> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –õ–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (LFI)
    üì§ /scan_rfi <URL> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –£–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (RFI)
    üîó /scan_idor <URL> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã (IDOR)

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    /scan_sql https://example.com/page
    """, reply_markup=main_menu_markup)


@bot.message_handler(commands=['cancel'])
def cancel_scan(message):
    global current_scan, pending_url
    if current_scan and current_scan.is_alive():
        current_scan.terminate()
        current_scan = None
        bot.reply_to(message, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_markup)
    else:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_menu_markup)
    pending_url = None


@bot.message_handler(commands=['scan_sql', 'scan_xss', 'scan_csrf', 'scan_lfi', 'scan_rfi', 'scan_idor'])
def handle_scan_command(message):
    global pending_url
    command_parts = message.text.split()
    if len(command_parts) == 1:
        scan_type = command_parts[0].replace('/scan_', '').upper()
        bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ {scan_type}. –ù–∞–ø—Ä–∏–º–µ—Ä: http://example.com",
                     reply_markup=cancel_markup)
        pending_url = {'scan_type': scan_type, 'analyze_func': get_analyze_function(scan_type)}
        bot.register_next_step_handler(message, validate_url)
    else:
        url = command_parts[1]
        scan_type = command_parts[0].replace('/scan_', '').upper()
        handle_scan(message, get_analyze_function(scan_type), scan_type, url)


def get_analyze_function(scan_type):
    scan_type_to_function = {
        'SQL': analyze_sql_vulnerabilities,
        'XSS': analyze_xss,
        'CSRF': analyze_csrf,
        'LFI': analyze_lfi,
        'RFI': analyze_rfi,
        'IDOR': analyze_idor
    }
    return scan_type_to_function.get(scan_type, None)


@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
def start_scan(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=scan_menu_markup)


@bot.callback_query_handler(func=lambda call: call.data == '{"method": "help"}')
def send_help(message):
    send_welcome(message)  # –í—ã–∑—ã–≤–∞–µ–º send_welcome —Å message


@bot.message_handler(func=lambda message: message.text == '–û –±–æ—Ç–µ')
def about(message):
    about_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:\n"
        "- SQL Injection\n"
        "- XSS (Cross-Site Scripting)\n"
        "- CSRF (Cross-Site Request Forgery)\n"
        "- LFI (Local File Inclusion)\n"
        "- RFI (Remote File Inclusion)\n"
        "- IDOR (Insecure Direct Object Reference)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n"
        "- Python\n"
        "- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: requests, aiohttp, telebot\n"
        "- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n\n"
        "–í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –ø–æ –ø–æ–∏—Å–∫—É –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."
    )
    bot.reply_to(message, about_text, reply_markup=main_menu_markup)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def go_back(message):
    bot.reply_to(message, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup)


@bot.message_handler(func=lambda message: message.text in ['SQL Injection', 'XSS', 'CSRF', 'LFI', 'RFI', 'IDOR'])
def handle_scan_type(message):
    global pending_url
    if current_scan and current_scan.is_alive():
        bot.reply_to(message,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel.",
                     reply_markup=main_menu_markup)
        return

    scan_type_to_function = {
        'SQL Injection': analyze_sql_vulnerabilities,
        'XSS': analyze_xss,
        'CSRF': analyze_csrf,
        'LFI': analyze_lfi,
        'RFI': analyze_rfi,
        'IDOR': analyze_idor
    }
    scan_type = message.text
    bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ {scan_type}. –ù–∞–ø—Ä–∏–º–µ—Ä: http://example.com",
                 reply_markup=cancel_markup)
    pending_url = {'scan_type': scan_type, 'analyze_func': scan_type_to_function[scan_type]}
    bot.register_next_step_handler(message, validate_url)


def validate_url(message):
    global pending_url
    url = message.text.strip()
    if url.lower() == '–æ—Ç–º–µ–Ω–∞' or url.lower() == '/cancel':
        cancel_scan(message)
    elif url.startswith("http"):
        handle_scan(message, pending_url['analyze_func'], pending_url['scan_type'], url)
        pending_url = None
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—è —Å http:// –∏–ª–∏ https://",
                     reply_markup=cancel_markup)
        bot.register_next_step_handler(message, validate_url)


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if current_scan and current_scan.is_alive():
        if message.text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
            cancel_scan(message)
        else:
            bot.reply_to(message,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
    elif pending_url:
        validate_url(message)
    else:
        send_welcome(message)


def handle_scan(message, analyze_func, scan_type, url):
    global vulnerabilities, results, current_scan
    try:
        bot.reply_to(message,
                     f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ {scan_type}: {url}\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /cancel, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞")
        queue = multiprocessing.Queue()
        current_scan = multiprocessing.Process(target=run_async_in_process,
                                               args=(queue, url, message.chat.id, analyze_func))
        current_scan.start()

        while current_scan.is_alive():
            bot.send_chat_action(message.chat.id, 'typing')
            time.sleep(5)

        current_scan.join()
        vulnerabilities = queue.get()
        logger.info(f"Vulnerabilities after scan: {vulnerabilities}")

        if 'error' in vulnerabilities:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {vulnerabilities['error']}")
        else:
            results = format_results(vulnerabilities)
            save_results_to_file(results)
            logger.info(f"Total results: {len(results)}")
            send_results_page(message.chat.id, 1)
    except Exception as e:
        logger.error(f"Error in handle_scan: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def save_results_to_file(results):
    try:
        with open('results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=4)
        logger.info("Results saved to results.json")
    except Exception as e:
        logger.error(f"Error saving results to file: {e}")


def load_results_from_file():
    global results
    try:
        with open('results.json', 'r', encoding='utf-8') as f:
            results = json.load(f)
        logger.info("Results loaded from results.json")
    except Exception as e:
        logger.error(f"Error loading results from file: {e}")


def run_async_in_process(queue, url, chat_id, analyze_func):
    loop = asyncio.get_event_loop()
    results = loop.run_until_complete(spider_and_analyze(url, chat_id, analyze_func))
    queue.put(results)


async def spider_and_analyze(url, chat_id, analyze_func):
    try:
        await send_message_with_retry(chat_id, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        logger.info(f"Starting spider for URL: {url}")
        await spider(url)  # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞
        logger.info(f"Spider finished for URL: {url}")

        await send_message_with_retry(chat_id, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")

        scraped_data = load_scraped_data('scraped_data.json')  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∞–ø–µ—Ä–∞
        logger.info(f"Scraped data loaded: {scraped_data}")

        vulnerabilities = await analyze_func(scraped_data)  # –ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        logger.info(f"Vulnerabilities found: {vulnerabilities}")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results.clear()
        formatted_results = format_results(vulnerabilities)
        results.extend(formatted_results)
        save_results_to_file(results)
        logger.info(f"Total results: {len(results)}")
        generate_detailed_report(scraped_data, vulnerabilities)

        return vulnerabilities
    except Exception as e:
        logger.error(f"Error in spider_and_analyze: {e}")
        await send_message_with_retry(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return {'error': str(e)}


async def send_message_with_retry(chat_id, message, timeout=60):
    try:
        async with ClientSession() as session:
            url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
            payload = {
                'chat_id': str(chat_id),
                'text': message,
                'parse_mode': 'HTML'
            }
            async with session.post(url, data=payload, timeout=timeout) as response:
                if response.status != 200:
                    logger.error(f"Failed to send message: {await response.text()}")
                else:
                    logger.info(f"Message sent successfully: {message}")
    except (ConnectionError, ReadTimeout) as e:
        logger.error(f"Error sending message: {e}")
        raise


@bot.callback_query_handler(func=lambda call: call.data == '{"method": "report"}')
def send_report(call):
    try:
        bot.send_document(call.message.chat.id, open('report.txt', 'rb'))
    except Exception as e:
        logger.error(f"Error in send_report: {e}")


@bot.callback_query_handler(func=lambda call: call.data == '{"method": "help"}')
def send_help(call):
    send_welcome(call)


def generate_detailed_report(scraped_data, vulnerabilities):
    report = "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    report += "=== –î–∞–Ω–Ω—ã–µ —Å–∫—Ä–∞–ø–µ—Ä–∞ ===\n"
    for page in scraped_data:
        report += f"URL: {page['URL']}\n"
        report += f"–ú–µ—Ç–æ–¥: {page['Method']}\n"
        report += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(page['Parameters'], indent=4)}\n"
        report += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page['Page Title']}\n"
        report += f"–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page['Page Size']}\n"
        report += f"–ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {page['Status Code']}\n"
        report += "–§–æ—Ä–º—ã:\n"
        for form in page.get('Forms', []):
            report += f"  Action: {form['action']}\n"
            report += f"  Method: {form['method']}\n"
            report += "  Inputs:\n"
            for input_tag in form['inputs']:
                report += f"    - {input_tag}\n"
        report += "-----------------------------------\n"

    report += "\n=== –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ ===\n"
    for result in vulnerabilities:
        report += f"URL: {result['url']}\n"
        if 'parameter' in result:
            report += f"–ü–∞—Ä–∞–º–µ—Ç—Ä: {result['parameter']}\n"
        report += f"–£—è–∑–≤–∏–º–æ—Å—Ç—å: {'–î–∞' if result['is_vulnerable'] else '–ù–µ—Ç'}\n"
        report += f"–¢–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {result['type']}\n"
        if 'payload' in result:
            report += f"Payload: {result['payload']}\n"
        if 'response_time' in result:
            report += f"–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {result['response_time']}\n"
        report += f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('recommendation', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')}\n"
        report += "-----------------------------------\n"

    report_path = "report.txt"
    with open(report_path, 'w', encoding='utf-8') as file:
        file.write(report)
    logger.info(f"Detailed report generated at {report_path}")
    return report_path


if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Error during polling: {e}")