import asyncio
import aiohttp
import logging
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_idor(session, url, param, value):
    if isinstance(value, list):
        value = value[0]
    try:
        original_value = int(value)
        altered_value = str(original_value + 1)
    except ValueError:
        logger.error(f"Cannot convert value to int: {value}")
        return False, None
    altered_url = url.replace(f"{param}={value}", f"{param}={altered_value}")
    logger.info(f"Testing IDOR with URL: {altered_url}")
    try:
        response = await session.get(altered_url)
        response_text = await response.text()
        logger.info(f"Response for {altered_url}: {response_text[:100]}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if response.status == 200 and altered_value in altered_url and "User not found" not in response_text:
            logger.info(f"IDOR vulnerability found: {altered_url}")
            return True, altered_url
    except Exception as e:
        logger.error(f"Error testing IDOR payload on {url}: {e}")
    return False, None

async def analyze_idor(scraped_data):
    vulnerabilities = []
    async with aiohttp.ClientSession() as session:
        for page in scraped_data:
            url = page['URL']
            params = page.get('Parameters', {})
            for param, value in params.items():
                logger.info(f"Analyzing URL: {url} with param: {param}")
                is_vulnerable, vulnerable_url = await test_idor(session, url, param, value)
                if is_vulnerable:
                    vulnerabilities.append({
                        'url': url,
                        'parameter': param,
                        'is_vulnerable': True,
                        'type': 'IDOR',
                        'payload': vulnerable_url,
                        'description': (
                            "IDOR (Insecure Direct Object Reference) —É—è–∑–≤–∏–º–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫—É –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
                            "–∏–∑–º–µ–Ω—è—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ URL."
                        ),
                        'risk_level': "üü† –°—Ä–µ–¥–Ω–∏–π",
                        'recommendation': (
                            "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è IDOR –∞—Ç–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                            "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
                            "2. –ù–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ URL –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
                            "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä—É–¥–Ω–æ –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å.\n"
                            "4. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π."
                        )
                    })
    return vulnerabilities

def load_scraped_data(file_path):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)
        logger.info(f"Scraped data loaded from {file_path}")
        return data
    except Exception as e:
        logger.error(f"Error loading scraped data from {file_path}: {e}")
        return []

if __name__ == '__main__':
    scraped_data = load_scraped_data('scraped_data.json')
    vulnerabilities = asyncio.run(analyze_idor(scraped_data))
    with open('idor_vulnerabilities.json', 'w') as f:
        json.dump(vulnerabilities, f, indent=4)
