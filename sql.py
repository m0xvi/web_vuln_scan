import aiohttp
import asyncio
import json
import logging
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_time_based_sql_injection(session, url, data, expected_delay=5):
    payloads = [
        "';WAITFOR DELAY '0:0:5';--",
        "';WAITFOR DELAY '0:0:10';--",
        "';WAITFOR DELAY '0:0:15';--",
    ]
    for payload in payloads:
        injected_data = {k: v + payload for k, v in data.items()}
        logger.info(f"Testing time-based SQL injection with payload: {payload}")
        start_time = time.time()
        async with session.post(url, data=injected_data) as response:
            await response.text()
        response_time = time.time() - start_time
        if response_time >= expected_delay:
            return {
                'url': url,
                'parameter': injected_data,
                'payload': payload,
                'method': 'POST',
                'vulnerable': True,
                'response_time': response_time,
                'is_vulnerable': True,
                'type': 'Time-based',
                'description': "Time-based SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.",
                'risk_level': "üî¥ –í—ã—Å–æ–∫–∏–π",
                'recommendation': (
                    "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Time-based SQL-–∏–Ω—ä–µ–∫—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                    "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (prepared statements) –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                    "   –ü—Ä–∏–º–µ—Ä –¥–ª—è Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLite:\n"
                    "   ```python\n"
                    "   import sqlite3\n"
                    "   conn = sqlite3.connect('example.db')\n"
                    "   cursor = conn.cursor()\n"
                    "   cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))\n"
                    "   ```\n"
                    "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
                    "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORM (Object-Relational Mapping) –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.\n"
                    "   –ü—Ä–∏–º–µ—Ä –¥–ª—è SQLAlchemy:\n"
                    "   ```python\n"
                    "   from sqlalchemy import create_engine\n"
                    "   from sqlalchemy.orm import sessionmaker\n"
                    "   engine = create_engine('sqlite:///example.db')\n"
                    "   Session = sessionmaker(bind=engine)\n"
                    "   session = Session()\n"
                    "   user = session.query(User).filter(User.id == user_id).first()\n"
                    "   ```\n"
                    "4. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                    "5. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏ –ø–∞—Ç—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ü–û.\n"
                    "6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (DAST) –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SAST).\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—Å–µ—Ç–∏—Ç–µ [OWASP Time-based SQL Injection](https://owasp.org/www-community/attacks/Time_based_SQL_Injection)."
                )
            }
    return {'url': url, 'is_vulnerable': False}

async def test_blind_sql_injection(session, url, data):
    true_payloads = [
        "' OR 1=1--",
        "' OR '1'='1'--",
        "' OR 1=1#",
    ]
    false_payloads = [
        "' OR 1=2--",
        "' OR '1'='2'--",
        "' OR 1=2#",
    ]
    for true_payload, false_payload in zip(true_payloads, false_payloads):
        injected_data_true = {k: v + true_payload for k, v in data.items()}
        injected_data_false = {k: v + false_payload for k, v in data.items()}

        async with session.post(url, data=injected_data_true) as response_true, session.post(url, data=injected_data_false) as response_false:
            text_true = await response_true.text()
            text_false = await response_false.text()

            if text_true != text_false:
                return {
                    'url': url,
                    'parameter': injected_data_true,
                    'payload': true_payload,
                    'method': 'POST',
                    'vulnerable': True,
                    'is_vulnerable': True,
                    'type': 'Blind',
                    'description': "Blind SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫.",
                    'risk_level': "üî¥ –í—ã—Å–æ–∫–∏–π",
                    'recommendation': (
                        "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Blind SQL-–∏–Ω—ä–µ–∫—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                        "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (prepared statements) –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                        "   –ü—Ä–∏–º–µ—Ä –¥–ª—è Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLite:\n"
                        "   ```python\n"
                        "   import sqlite3\n"
                        "   conn = sqlite3.connect('example.db')\n"
                        "   cursor = conn.cursor()\n"
                        "   cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))\n"
                        "   ```\n"
                        "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
                        "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORM (Object-Relational Mapping) –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.\n"
                        "   –ü—Ä–∏–º–µ—Ä –¥–ª—è SQLAlchemy:\n"
                        "   ```python\n"
                        "   from sqlalchemy import create_engine\n"
                        "   from sqlalchemy.orm import sessionmaker\n"
                        "   engine = create_engine('sqlite:///example.db')\n"
                        "   Session = sessionmaker(bind=engine)\n"
                        "   session = Session()\n"
                        "   user = session.query(User).filter(User.id == user_id).first()\n"
                        "   ```\n"
                        "4. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                        "5. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏ –ø–∞—Ç—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ü–û.\n"
                        "6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (DAST) –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SAST).\n"
                        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—Å–µ—Ç–∏—Ç–µ [OWASP Blind SQL Injection](https://owasp.org/www-community/attacks/Blind_SQL_Injection)."
                    )
                }
    return {'url': url, 'is_vulnerable': False}

async def test_error_based_sql_injection(session, url, data):
    payloads = [
        "' OR 1=1--",
        "' OR 'a'='a'--",
        "' OR 1=1#",
        "' OR 'a'='a'#",
    ]
    for payload in payloads:
        injected_data = {k: v + payload for k, v in data.items()}
        logger.info(f"Testing error-based SQL injection with payload: {payload}")
        async with session.post(url, data=injected_data) as response:
            text = await response.text()
            if "error" in text.lower() or "sql" in text.lower():
                return {
                    'url': url,
                    'parameter': injected_data,
                    'payload': payload,
                    'method': 'POST',
                    'vulnerable': True,
                    'is_vulnerable': True,
                    'type': 'Error-based',
                    'description': "Error-based SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
                    'risk_level': "üî¥ –í—ã—Å–æ–∫–∏–π",
                    'recommendation': (
                        "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Error-based SQL-–∏–Ω—ä–µ–∫—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                        "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (prepared statements) –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                        "   –ü—Ä–∏–º–µ—Ä –¥–ª—è Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLite:\n"
                        "   ```python\n"
                        "   import sqlite3\n"
                        "   conn = sqlite3.connect('example.db')\n"
                        "   cursor = conn.cursor()\n"
                        "   cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))\n"
                        "   ```\n"
                        "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
                        "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORM (Object-Relational Mapping) –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.\n"
                        "   –ü—Ä–∏–º–µ—Ä –¥–ª—è SQLAlchemy:\n"
                        "   ```python\n"
                        "   from sqlalchemy import create_engine\n"
                        "   from sqlalchemy.orm import sessionmaker\n"
                        "   engine = create_engine('sqlite:///example.db')\n"
                        "   Session = sessionmaker(bind=engine)\n"
                        "   session = Session()\n"
                        "   user = session.query(User).filter(User.id == user_id).first()\n"
                        "   ```\n"
                        "4. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                        "5. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏ –ø–∞—Ç—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ü–û.\n"
                        "6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (DAST) –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SAST).\n"
                        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—Å–µ—Ç–∏—Ç–µ [OWASP Error-based SQL Injection](https://owasp.org/www-community/attacks/Error_based_SQL_Injection)."
                    )
                }
    return {'url': url, 'is_vulnerable': False}

async def test_union_based_sql_injection(session, url, data):
    payloads = [
        "' UNION SELECT null--",
        "' UNION SELECT null, null--",
        "' UNION SELECT null, null, null--",
    ]
    for payload in payloads:
        injected_data = {k: v + payload for k, v in data.items()}
        logger.info(f"Testing union-based SQL injection with payload: {payload}")
        async with session.post(url, data=injected_data) as response:
            text = await response.text()
            if "error" not in text.lower() and "sql" not in text.lower():
                return {
                    'url': url,
                    'parameter': injected_data,
                    'payload': payload,
                    'method': 'POST',
                    'vulnerable': True,
                    'is_vulnerable': True,
                    'type': 'Union-based',
                    'description': "Union-based SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
                    'risk_level': "üî¥ –í—ã—Å–æ–∫–∏–π",
                    'recommendation': (
                        "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Union-based SQL-–∏–Ω—ä–µ–∫—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                        "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (prepared statements) –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                        "   –ü—Ä–∏–º–µ—Ä –¥–ª—è Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLite:\n"
                        "   ```python\n"
                        "   import sqlite3\n"
                        "   conn = sqlite3.connect('example.db')\n"
                        "   cursor = conn.cursor()\n"
                        "   cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))\n"
                        "   ```\n"
                        "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
                        "3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ORM (Object-Relational Mapping) –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.\n"
                        "   –ü—Ä–∏–º–µ—Ä –¥–ª—è SQLAlchemy:\n"
                        "   ```python\n"
                        "   from sqlalchemy import create_engine\n"
                        "   from sqlalchemy.orm import sessionmaker\n"
                        "   engine = create_engine('sqlite:///example.db')\n"
                        "   Session = sessionmaker(bind=engine)\n"
                        "   session = Session()\n"
                        "   user = session.query(User).filter(User.id == user_id).first()\n"
                        "   ```\n"
                        "4. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
                        "5. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏ –ø–∞—Ç—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ü–û.\n"
                        "6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (DAST) –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (SAST).\n"
                        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—Å–µ—Ç–∏—Ç–µ [OWASP Union-based SQL Injection](https://owasp.org/www-community/attacks/Union_SQL_Injection)."
                    )
                }
    return {'url': url, 'is_vulnerable': False}

async def analyze_vulnerabilities(data):
    vulnerabilities = []
    async with aiohttp.ClientSession() as session:
        for entry in data:
            url = entry['URL']
            for form in entry.get('Forms', []):
                form_action = form.get('action')
                form_method = form.get('method', 'GET').upper()
                form_inputs = form.get('inputs', [])
                form_data = {input_tag['name']: input_tag.get('value', '') for input_tag in form_inputs if input_tag['type'] != 'submit'}

                if form_method == 'POST':
                    vulnerability = await test_error_based_sql_injection(session, form_action, form_data)
                    if vulnerability['is_vulnerable']:
                        vulnerabilities.append(vulnerability)

                    vulnerability = await test_union_based_sql_injection(session, form_action, form_data)
                    if vulnerability['is_vulnerable']:
                        vulnerabilities.append(vulnerability)

                    vulnerability = await test_time_based_sql_injection(session, form_action, form_data)
                    if vulnerability['is_vulnerable']:
                        vulnerabilities.append(vulnerability)

                    vulnerability = await test_blind_sql_injection(session, form_action, form_data)
                    if vulnerability['is_vulnerable']:
                        vulnerabilities.append(vulnerability)
    return vulnerabilities

def load_scraped_data(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)
