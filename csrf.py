import logging
import json
import asyncio
import aiohttp
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_csrf(session, url, form):
    form_data = {input['name']: input['value'] for input in form['inputs'] if input['name']}
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    response = await session.post(url, data=form_data, headers=headers)
    logger.info(f"Tested CSRF for URL: {url} - Status Code: {response.status}")
    return response.status != 403


async def analyze_csrf(scraped_data):
    vulnerabilities = []
    async with aiohttp.ClientSession() as session:
        for page in scraped_data:
            url = page['URL']
            forms = page.get('Forms', [])
            logger.info(f"Analyzing URL: {url} - Found Forms: {len(forms)}")
            for form in forms:
                if await test_csrf(session, url, form):
                    form_fields = [input['name'] for input in form['inputs'] if input['name']]
                    vulnerabilities.append({
                        'url': url,
                        'form_action': form['action'],
                        'form_method': form['method'],
                        'form_fields': form_fields,
                        'is_vulnerable': True,
                        'type': 'CSRF',
                        'description': (
                            "CSRF —É—è–∑–≤–∏–º–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å "
                            "–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–∞–π—Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω."
                        ),
                        'risk_level': "üü† –°—Ä–µ–¥–Ω–∏–π",
                        'recommendation': (
                            "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è CSRF –∞—Ç–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                            "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ CSRF-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º—ã.\n"
                            "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å CSRF-—Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
                            "3. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ CSRF-—Ç–æ–∫–µ–Ω–∞.\n"
                            "4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'SameSite' –¥–ª—è cookie —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º 'Strict' –∏–ª–∏ 'Lax'.\n"
                            "5. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ 'Origin' –∏–ª–∏ 'Referer' —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏."
                            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—Å–µ—Ç–∏—Ç–µ [Cross Site Request Forgery (CSRF)] https://owasp.org/www-community/attacks/csrf"
                        ),
                        'code_examples': {
                            'python': (
                                "python\n"
                                "# –ü—Ä–∏–º–µ—Ä –¥–ª—è Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flask –∏ CSRF-—Ç–æ–∫–µ–Ω–æ–≤\n\n"
                                "from flask import Flask, request, session, make_response\n"
                                "import os\n\n"
                                "app = Flask(__name__)\n"
                                "app.secret_key = os.urandom(24)\n\n"
                                "@app.before_request\n"
                                "def csrf_protect():\n"
                                "    if request.method == 'POST':\n"
                                "        token = session.pop('_csrf_token', None)\n"
                                "        if not token or token != request.form.get('_csrf_token'):\n"
                                "            return 'CSRF token missing or incorrect', 400\n\n"
                                "def generate_csrf_token():\n"
                                "    token = os.urandom(24).hex()\n"
                                "    session['_csrf_token'] = token\n"
                                "    return token\n\n"
                                "app.jinja_env.globals['csrf_token'] = generate_csrf_token\n\n"
                                "@app.route('/')\n"
                                "def index():\n"
                                "    resp = make_response('Setting a cookie')\n"
                                "    resp.set_cookie('example', 'value', samesite='Strict')\n"
                                "    return resp\n\n"
                                "if __name__ == '__main__':\n"
                                "    app.run()"
                            ),
                            'php': (
                                "php\n"
                                "<?php\n"
                                "// –ü—Ä–∏–º–µ—Ä –¥–ª—è PHP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SameSite –∏ CSRF-—Ç–æ–∫–µ–Ω–∞\n\n"
                                "// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookie —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º SameSite\n"
                                "setcookie('example', 'value', [\n"
                                "  'samesite' => 'Strict',\n"
                                "  'secure' => true,\n"
                                "  'httponly' => true\n"
                                "]);\n\n"
                                "// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ CSRF-—Ç–æ–∫–µ–Ω–∞\n"
                                "session_start();\n"
                                "if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n"
                                "  if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {\n"
                                "    die('Invalid CSRF token');\n"
                                "  }\n"
                                "}\n"
                                "$_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n"
                                "?>\n\n"
                                "<form method=\"POST\">\n"
                                "  <input type=\"hidden\" name=\"csrf_token\" value=\"<?php echo $_SESSION['csrf_token']; ?>\">\n"
                                "  <!-- –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã -->\n"
                                "</form>"
                            ),
                            'java': (
                                "// –ü—Ä–∏–º–µ—Ä –¥–ª—è Java —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Spring Security –∏ CSRF\n\n"
                                "import org.springframework.context.annotation.Configuration;\n"
                                "import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n"
                                "import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n"
                                "import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n"
                                "@Configuration\n"
                                "@EnableWebSecurity\n"
                                "public class SecurityConfig extends WebSecurityConfigurerAdapter {\n"
                                "    @Override\n"
                                "    protected void configure(HttpSecurity http) throws Exception {\n"
                                "        http\n"
                                "            .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n"
                                "            .and()\n"
                                "            .authorizeRequests()\n"
                                "            .anyRequest().authenticated();\n"
                                "    }\n"
                                "}"
                            ),
                            'javascript': (
                                "javascript\n"
                                "// –ü—Ä–∏–º–µ—Ä –¥–ª—è Node.js —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Express –∏ CSRF-—Ç–æ–∫–µ–Ω–æ–≤\n\n"
                                "const express = require('express');\n"
                                "const csrf = require('csurf');\n"
                                "const cookieParser = require('cookie-parser');\n\n"
                                "const app = express();\n"
                                "const csrfProtection = csrf({ cookie: true });\n\n"
                                "app.use(cookieParser());\n\n"
                                "app.get('/form', csrfProtection, (req, res) => {\n"
                                "    res.cookie('example', 'value', { sameSite: 'Strict' });\n"
                                "    res.send(`\n"
                                "        <form action=\"/process\" method=\"POST\">\n"
                                "            <input type=\"hidden\" name=\"_csrf\" value=\"${req.csrfToken()}\">\n"
                                "            <!-- –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã -->\n"
                                "            <button type=\"submit\">Submit</button>\n"
                                "        </form>\n"
                                "    `);\n"
                                "});\n\n"
                                "app.post('/process', csrfProtection, (req, res) => {\n"
                                "    res.send('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');\n"
                                "});\n\n"
                                "app.listen(3000, () => console.log('Server is running on port 3000'));"
                            )
                        }
                    })
    return vulnerabilities


def load_scraped_data(file_path):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)
        logger.info(f"Scraped data loaded from {file_path}")
        return data
    except Exception as e:
        logger.error(f"Error loading scraped data from {file_path}: {e}")
        return []


if __name__ == '__main__':
    scraped_data = load_scraped_data('scraped_data.json')
    vulnerabilities = asyncio.run(analyze_csrf(scraped_data))
    with open('csrf_vulnerabilities.json', 'w') as f:
        json.dump(vulnerabilities, f, indent=4)
    print("CSRF Scan Results:", json.dumps(vulnerabilities, indent=4))
